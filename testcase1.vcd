$date
	Wed Dec 23 14:17:24 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module t_buffertest $end
$var wire 32 ! in_out [31:0] $end
$var wire 1 " tTRDY $end
$var wire 1 # tDEVSEL $end
$var wire 1 $ clk $end
$var reg 4 % operation [3:0] $end
$var reg 32 & tAD [31:0] $end
$var reg 4 ' tCBE [3:0] $end
$var reg 1 ( tIRDY $end
$var reg 1 ) tframe $end
$scope module B1 $end
$var wire 32 * AD [31:0] $end
$var wire 4 + CBE [3:0] $end
$var wire 1 ( IRDY $end
$var wire 1 ) frame $end
$var wire 4 , operation [3:0] $end
$var wire 1 - hhh $end
$var wire 1 $ clk $end
$var wire 1 # DEVSEL $end
$var reg 1 " TRDY $end
$var reg 10 . memCount [9:0] $end
$var reg 3 / readCount [2:0] $end
$var reg 3 0 writeCount [2:0] $end
$scope module get1 $end
$var wire 4 1 CBE [3:0] $end
$var wire 1 ) frame $end
$var reg 4 2 CMD [3:0] $end
$upscope $end
$scope module verify1 $end
$var wire 32 3 AD [31:0] $end
$var wire 1 ) frame $end
$var wire 1 $ clk $end
$var reg 1 # DEVSEL $end
$var reg 1 - TRDY $end
$var reg 3 4 counter [2:0] $end
$var reg 3 5 elCounterElTany [2:0] $end
$var reg 32 6 recievedAddress [31:0] $end
$upscope $end
$upscope $end
$scope module c1 $end
$var reg 1 $ clk $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 6
b0 5
b0 4
bx 3
bx 2
bx 1
b0 0
b111 /
b0 .
x-
bx ,
bx +
bx *
1)
1(
bx '
bx &
bx %
0$
x#
x"
bx !
$end
#5
1$
#10
b1111101000 6
b1111101000 !
b1111101000 *
b1111101000 3
b1 4
b111 ,
b111 2
0$
b1111101000 &
b111 '
b111 +
b111 1
b111 %
0)
#15
1$
#20
b10 4
0$
0(
#25
1$
#30
0"
0-
0#
b11 4
b10101010101010101010101010101010 !
b10101010101010101010101010101010 *
b10101010101010101010101010101010 3
0$
b10101010101010101010101010101010 &
b101 '
b101 +
b101 1
#35
b1 0
1$
#40
b100 4
b10111011101110111011101110111011 !
b10111011101110111011101110111011 *
b10111011101110111011101110111011 3
0$
b10111011101110111011101110111011 &
b1111 '
b1111 +
b1111 1
#45
b10 0
1$
#50
b10101010101010101100110011001100 !
b10101010101010101100110011001100 *
b10101010101010101100110011001100 3
0$
b10101010101010101100110011001100 &
b101 '
b101 +
b101 1
#55
b11 0
1$
#60
b11011101110111011101110111011101 !
b11011101110111011101110111011101 *
b11011101110111011101110111011101 3
0$
b11011101110111011101110111011101 &
b1100 '
b1100 +
b1100 1
#65
b100 0
1$
#70
b1 5
1"
0$
1)
#75
b100 .
b0 0
1$
#80
0"
b10 5
0$
1(
#85
1$
#90
bx !
bx *
bx 3
b110 ,
b110 2
0$
b1111101000 &
b110 '
b110 +
b110 1
0)
#95
1$
#100
0$
b110 %
0(
#105
b101010100000000010101010 !
b101010100000000010101010 *
b101010100000000010101010 3
b0 /
1$
#110
0$
#115
b10111011101110111011101110111011 !
b10111011101110111011101110111011 *
b10111011101110111011101110111011 3
b1 /
1$
#120
0$
#125
b101010100000000011001100 !
b101010100000000011001100 *
b101010100000000011001100 3
b10 /
1$
#130
0$
#135
b11011101110111010000000000000000 !
b11011101110111010000000000000000 *
b11011101110111010000000000000000 3
b11 /
1$
#140
0$
#145
b101010100000000010101010 !
b101010100000000010101010 *
b101010100000000010101010 3
b0 /
1$
#150
0$
#155
b10111011101110111011101110111011 !
b10111011101110111011101110111011 *
b10111011101110111011101110111011 3
b1 /
1$
#160
0$
#165
b101010100000000011001100 !
b101010100000000011001100 *
b101010100000000011001100 3
b10 /
1$
#170
0$
#175
b11011101110111010000000000000000 !
b11011101110111010000000000000000 *
b11011101110111010000000000000000 3
b11 /
1$
#180
bz !
bz *
bz 3
1"
b0 4
1-
1#
b11 5
0$
1)
#185
1$
#190
b100 5
0$
1(
#195
1$
#200
0$
